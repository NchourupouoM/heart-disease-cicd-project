name: CI/CD Pipeline for Heart Disease Model

# Déclenche le workflow sur les push et pull requests vers la branche 'dev'
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupère le code du repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Met en place l'environnement Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3. Installe les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 4. Entraîne le modèle
      - name: Train model
        run: python scripts/train.py

      # 5. Évalue le modèle
      - name: Evaluate model
        id: evaluate # Donne un ID à cette étape pour pouvoir réutiliser ses outputs
        run: |
          python scripts/evaluate.py
          # Lire le score depuis le fichier JSON et le mettre en output de l'étape
          SCORE=$(jq .accuracy metrics/metrics.json)
          echo "score=$SCORE" >> $GITHUB_OUTPUT

      # 6. Étape de décision : Déployer ou non
      - name: Check score against threshold
        id: check_score
        run: |
          SCORE=${{ steps.evaluate.outputs.score }}
          THRESHOLD=${{ secrets.THRESHOLD_SCORE }}
          echo "Model Score: $SCORE"
          echo "Threshold: $THRESHOLD"
          if (( $(echo "$SCORE >= $THRESHOLD" | bc -l) )); then
            echo "✅ Score is above threshold. Proceeding to deployment."
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Score is below threshold. Deployment skipped."
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      # 7. Déployer sur Hugging Face SI le score est suffisant
      - name: Deploy to Hugging Face Hub
        if: steps.check_score.outputs.deploy == 'true'
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
        run: python scripts/deploy.py
        
      # 8. Envoyer une notification par email (SUCCÈS)
      - name: Send success email notification
        if: success() && steps.check_score.outputs.deploy == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "✅ [SUCCÈS] Déploiement du modèle Heart Disease"
          body: |
            Bonjour,
            Le modèle de classification des maladies cardiaques a été validé et déployé avec succès.
            Score d'accuracy obtenu : ${{ steps.evaluate.outputs.score }} (Seuil : ${{ secrets.THRESHOLD_SCORE }})
            Commit par : ${{ github.actor }}
            Lien vers les logs du workflow : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.ADMIN_EMAIL }},${{ github.event.pusher.email }}
          from: GitHub Actions Notifier <${{ secrets.SMTP_USER }}>

      # 9. Envoyer une notification par email (ÉCHEC)
      - name: Send failure email notification
        if: failure() || steps.check_score.outputs.deploy == 'false'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "❌ [ÉCHEC] Validation du modèle Heart Disease"
          body: |
            Bonjour,
            La validation du modèle de classification des maladies cardiaques a échoué.
            Score d'accuracy obtenu : ${{ steps.evaluate.outputs.score }} (Seuil requis : ${{ secrets.THRESHOLD_SCORE }})
            Le déploiement a été annulé.
            Commit par : ${{ github.actor }}
            Lien vers les logs du workflow pour analyse : ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.ADMIN_EMAIL }},${{ github.event.pusher.email }}
          from: GitHub Actions Notifier <${{ secrets.SMTP_USER }}>